#include <bits/stdc++.h>
using namespace std;

struct Edge { int v; double w; };

void UCS(int n, vector<vector<Edge>>& adj, int start, int goal) {
    vector<double> cost(n, 1e18);
    vector<int> parent(n, -1);
    using P = pair<double,int>;
    priority_queue<P, vector<P>, greater<P>> pq;

    cost[start] = 0;
    pq.push({0, start});

    vector<int> visited(n,0);

    while(!pq.empty()) {
        auto [c, u] = pq.top(); pq.pop();
        if(visited[u]) continue;
        visited[u] = 1;
        if(u == goal) break;

        for(auto e : adj[u]) {
            if(c + e.w < cost[e.v]) {
                cost[e.v] = c + e.w;
                parent[e.v] = u;
                pq.push({cost[e.v], e.v});
            }
        }
    }

    // reconstruct path
    vector<int> path;
    for(int cur = goal; cur != -1; cur = parent[cur]) path.push_back(cur);
    reverse(path.begin(), path.end());

    cout << "UCS Path: ";
    for(int v : path) cout << v << " ";
    cout << "\nCost: " << cost[goal] << "\n";
}

int main() {
    int n = 7;
    vector<vector<Edge>> adj(n);
    auto addEdge = [&](int u, int v, double w) {
        adj[u].push_back({v,w});
        adj[v].push_back({u,w}); // undirected
    };
    addEdge(0,1,2); addEdge(0,2,5);
    addEdge(1,3,1); addEdge(1,4,3);
    addEdge(2,5,1); addEdge(5,6,1); addEdge(4,6,2);

    int start=0, goal=6;
    UCS(n, adj, start, goal);
}

#include <bits/stdc++.h>
using namespace std;

void BFS(int n, vector<vector<int>>& adj, int start, int goal) {
    vector<int> parent(n, -1);
    vector<int> dist(n, INT_MAX);
    queue<int> q;

    dist[start] = 0;
    q.push(start);

    while(!q.empty()) {
        int u = q.front(); q.pop();
        if (u == goal) break;  // found goal
        for(int v : adj[u]) {
            if(dist[v] == INT_MAX) {
                dist[v] = dist[u] + 1;
                parent[v] = u;
                q.push(v);
            }
        }
    }

    // reconstruct path
    vector<int> path;
    for(int cur = goal; cur != -1; cur = parent[cur]) path.push_back(cur);
    reverse(path.begin(), path.end());

    cout << "BFS Path: ";
    for(int v : path) cout << v << " ";
    cout << "\nCost (edges): " << dist[goal] << "\n";
}

int main() {
    int n = 7;
    vector<vector<int>> adj(n);
    adj[0] = {1,2};
    adj[1] = {3,4};
    adj[2] = {5};
    adj[5] = {6};
    int start=0, goal=6;
    BFS(n, adj, start, goal);
}

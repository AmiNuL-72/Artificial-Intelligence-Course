#include <bits/stdc++.h>
using namespace std;

bool DLS(int u, int goal, int limit, vector<vector<int>>& adj, vector<int>& parent, vector<int>& visited) {
    if(u == goal) return true;
    if(limit == 0) return false;
    visited[u] = 1;
    for(int v : adj[u]) {
        if(!visited[v]) {
            parent[v] = u;
            if(DLS(v, goal, limit-1, adj, parent, visited)) return true;
        }
    }
    return false;
}

void IDS(int n, vector<vector<int>>& adj, int start, int goal, int maxDepth) {
    for(int depth = 0; depth <= maxDepth; depth++) {
        vector<int> parent(n, -1), visited(n, 0);
        if(DLS(start, goal, depth, adj, parent, visited)) {
            // reconstruct path
            vector<int> path;
            for(int cur = goal; cur != -1; cur = parent[cur]) path.push_back(cur);
            reverse(path.begin(), path.end());
            cout << "IDS Path (depth " << depth << "): ";
            for(int v : path) cout << v << " ";
            cout << "\n";
            return;
        }
    }
    cout << "IDS: Goal not found within depth limit\n";
}

int main() {
    int n = 7;
    vector<vector<int>> adj(n);
    adj[0] = {1,2};
    adj[1] = {3,4};
    adj[2] = {5};
    adj[5] = {6};
    int start=0, goal=6;
    IDS(n, adj, start, goal, 10);
}
